package xupengofmorethread;
/**
 * 并发编程中的另一个限制是 软硬件的性能限制
 *
 * 1.硬件方面的硬件资源限制有带宽的上传/下载速度、硬盘读写速度和CPU的处理速度。
 *   如果一个服务器的带宽特别低
 *   那么程序中启动再多的线程也没有作用，多个线程合作完成一个任务
 *   在多核CPU中通常会加快任务的执行速度，但是如果服务器跟不上这个
 *   快的节奏，最终使得任务的执行效率和串行执行一样，那么并发编程
 *   就失去了意义，反而额外的增加了上下文切换和创建线程和调度线程的开销
 *
 *   2.软件资源限制有数据库的连接数和socket连接数等。
 *
 *    当一个程序试图为每一个客户端请求socket都创建一个线程来实现
 *    与服务器之间的数据交互时，就会出现一个问题；任何情况下服务器
 *    允许创建的socket（一个文件描述符）数量都是有限的，所以理想状态
 *    是不成立的，我们必须想办法在满足服务器允许创建socket数量的上线
 *    的情况下，尽可能高效的实现多个线程的并发访问。
 *
 *
 *    解决资源限制常用的方法有：
 *     硬件方面采用多个集群协作来完成同一个任务的服务；可以考虑使用集群并行执行程序。
 *     既然单机的资源有限制，那么就让程序在多机上运行。比如使用ODPS、Hadoop或者自己搭建服务器集群，不同的机器处理不同
 *     的数据。可以通过“数据ID%机器数”，计算得到一个机器编号，然后由对应编号的机器处理这笔数据。
 *
 *     对于软件资源限制，可以考虑使用资源池将资源复用。比如使用连接池将数据库和Socket
 *     连接复用，或者在调用对方webservice接口获取数据时，只建立一个连接。
 *
 */
public class 资源限制 {
}
